import PyPDF2
import re
import pandas as pd
import os

def LerDados():
    caminhoBanco = r'..\PROJECT03\BdNomes\NomesCpfsBD.xlsx'
    lerBancoDeDados = pd.read_excel(caminhoBanco)
    
    return lerBancoDeDados

def abrir_pdf(arquivo_pdf):
    """Abre o arquivo PDF para leitura binária e retorna o conteúdo da primeira página."""
    try:
        with open(arquivo_pdf, 'rb') as arquivopdf:
            # Criar um leitor de PDF
            pdf = PyPDF2.PdfReader(arquivopdf)

            # Acessar a primeira página do PDF
            pagina = pdf.pages[0]

            # Extrair o texto da página
            conteudo = pagina.extract_text()
        
        return conteudo
    except FileNotFoundError:
        print(f"Arquivo não encontrado: {arquivo_pdf}")
        return None

def encontrar_cpfs(conteudo):
    """Encontra CPFs com e sem pontuação em um texto."""
    # Expressão regular para encontrar CPFs com e sem pontuação
    pattern_com_pontuacao = r'\b\d{3}\.\d{3}\.\d{3}-\d{2}\b'
    pattern_sem_pontuacao = r'\b\d{11}\b'

    # Encontrar CPFs com pontuação
    cpfs_com_pontuacao = re.findall(pattern_com_pontuacao, conteudo) if conteudo else []
    # Encontrar CPFs sem pontuação
    cpfs_sem_pontuacao = re.findall(pattern_sem_pontuacao, conteudo) if conteudo else []

    return cpfs_com_pontuacao, cpfs_sem_pontuacao

def verificar_cpfs_com_nomes(cpfs_com_pontuacao, banco_dados):
    """Verifica se os CPFs encontrados correspondem a algum nome na lista de CPFs e nomes."""
    for cpfPessoa in cpfs_com_pontuacao:
        for index, row in banco_dados.iterrows():
            if cpfPessoa == row['CPF']:
                nome = row['NOME']
                return cpfPessoa, nome
    return None, None

def QtdeNomesDosArquivosNaPastaPdfSeparado():
    nomes_arquivos = os.listdir("../PROJECT03/PdfSeparado")
    qtde_arquivos = len(nomes_arquivos)
    
    return qtde_arquivos

def NomesDosArquivosNaPastaPdfSeparado():
    nomes_arquivos = os.listdir("../PROJECT03/PdfSeparado")
    
    return nomes_arquivos

def CaminhoDoDiretorio():
    caminho = f"../PROJECT03/PdfSeparado"
    return caminho

def RenomearArquivoGeradoPeloLerPdf(caminho_pdf, cpf, nome):
    """Renomeia o arquivo PDF com base no nome encontrado."""
    if cpf and nome:
        novo_nome = f"{nome}_{cpf}.pdf"
        caminho_novo = os.path.join(CaminhoDoDiretorio(), novo_nome)
        os.rename(caminho_pdf, caminho_novo)
        print(f"Arquivo renomeado para: {novo_nome}")
    else:
        print("CPF ou nome não encontrado para renomeação.")

def main(cont):
    # Caminho do arquivo PDF a ser lido
    caminho_pdf = f'../PROJECT03/PdfSeparado/{cont}.pdf'

    # Abrir o PDF e extrair o conteúdo
    conteudo = abrir_pdf(caminho_pdf)

    if conteudo is not None:
        # Encontrar CPFs no conteúdo extraído
        cpfs_com_pontuacao, cpfs_sem_pontuacao = encontrar_cpfs(conteudo)

        # Imprimir os CPFs encontrados
        print("CPFs com pontuação:", cpfs_com_pontuacao)
        print("CPFs sem pontuação:", cpfs_sem_pontuacao)

        # Carregar dados de nomes e CPFs
        banco_dados = LerDados()

        # Verificar se algum CPF corresponde a um nome
        cpf, nome = verificar_cpfs_com_nomes(cpfs_com_pontuacao, banco_dados)

        # Renomear o arquivo conforme o banco de dados
        RenomearArquivoGeradoPeloLerPdf(caminho_pdf, cpf, nome)

#CHAMA O MAIN
cont = 1
for i in range(QtdeNomesDosArquivosNaPastaPdfSeparado()):
    print(f"Processando arquivo {cont}.pdf...")
    main(cont)
    cont += 1
