import PyPDF2
import re
import pandas as pd
import os
import datetime


def LerDados():
    """Lê o banco de dados de nomes e CPFs."""
    caminhoBanco = r'..\PROJECT03\BdNomes\NomesCpfsBD.xlsx'
    lerBancoDeDados = pd.read_excel(caminhoBanco)
    
    return lerBancoDeDados

def data():
    agora = datetime.datetime.now()
    return agora.strftime('%m')

def abrir_pdf(arquivo_pdf):
    """Abre o arquivo PDF para leitura binária e retorna o conteúdo da primeira página."""
    try:
        with open(arquivo_pdf, 'rb') as arquivopdf:
            # Criar um leitor de PDF
            pdf = PyPDF2.PdfReader(arquivopdf)

            # Acessar a primeira página do PDF
            pagina = pdf.pages[0]

            # Extrair o texto da página
            conteudo = pagina.extract_text()
        
        return conteudo
    except FileNotFoundError:
        print(f"Arquivo não encontrado: {arquivo_pdf}")
        return None

def encontrar_nomes(conteudo):
    """Encontra nomes em caixa alta sem acentuação em um texto."""
    # Expressão regular para encontrar nomes (palavras em maiúsculas sem acentuação)
    pattern_nomes = r'\b[A-Z]+(?:\s+[A-Z]+)+\b'
    
    # Encontrar nomes
    nomes_encontrados = re.findall(pattern_nomes, conteudo) if conteudo else []

    return nomes_encontrados

def verificar_nomes_com_banco(nomes_encontrados, banco_dados):
    """Verifica se os nomes encontrados correspondem a algum nome na lista de CPFs e nomes."""
    try:
        for nome in nomes_encontrados:
            for index, row in banco_dados.iterrows():
                if nome == row['NOME']:
                    return row['NOME']
        return None    
    except:
        return "verificar_nomes_com_banco não esta funcionando."

def QtdeNomesDosArquivosNaPastaPdfSeparado():
    nomes_arquivos = os.listdir("../PROJECT03/PdfSeparado")
    qtde_arquivos = len(nomes_arquivos)
    
    return qtde_arquivos

def NomesDosArquivosNaPastaPdfSeparado():
    nomes_arquivos = os.listdir("../PROJECT03/PdfSeparado")
    
    return nomes_arquivos

def CaminhoDoDiretorio():
    caminho = f"../PROJECT03/PdfSeparado"
    return caminho

def RenomearArquivoGeradoPeloLerPdf(caminho_pdf, nome, dt):
    """Renomeia o arquivo PDF com base no nome encontrado."""
    try:
        novo_nome = f"{dt}-{nome}.pdf"
        caminho_novo = os.path.join(CaminhoDoDiretorio(), novo_nome)
        os.rename(caminho_pdf, caminho_novo)
        return f"Arquivo renomeado para: {novo_nome}"
    except:
        return "NOME não encontrado para renomeação."

def main(cont):
    # Caminho do arquivo PDF a ser lido
    caminho_pdf = f'../PROJECT03/PdfSeparado/{cont}.pdf'

    # Abrir o PDF e extrair o conteúdo
    conteudo = abrir_pdf(caminho_pdf)

    if conteudo is not None:
        # Encontrar nomes no conteúdo extraído
        nomes_encontrados = encontrar_nomes(conteudo)
        print("Nomes encontrados:", nomes_encontrados)

        # Carregar dados de nomes e CPFs
        banco_dados = LerDados()
        dt = data()

        # Verificar se algum nome corresponde ao banco de dados
        nome = verificar_nomes_com_banco(nomes_encontrados, banco_dados)

        # Renomear o arquivo conforme o banco de dados
        alertNomesRenomeados = RenomearArquivoGeradoPeloLerPdf(caminho_pdf, nome, dt)
        print(alertNomesRenomeados)

# CHAMA O MAIN
cont = 1
for i in range(QtdeNomesDosArquivosNaPastaPdfSeparado()):
    print(f"Processando arquivo {cont}.pdf...")
    main(cont)
    cont += 1
